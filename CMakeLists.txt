cmake_minimum_required(VERSION 3.18.3)

set(APP_NAME roguelike)

project(${APP_NAME})

include_directories(Include)

if(XCODE)
    if(NOT DEFINED CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET)
        set(CMAKE_XCODE_ATTRIBUTE_IPHONEOS_DEPLOYMENT_TARGET 8.0)
    endif()
endif()

if(NOT DEFINED BUILD_ENGINE_DONE) # to test roguelike into root project
    set(COCOS2DX_ROOT_PATH ${CMAKE_CURRENT_SOURCE_DIR}/cocos2d)
    set(CMAKE_MODULE_PATH ${COCOS2DX_ROOT_PATH}/cmake/Modules/)

    include(CocosBuildSet)
    add_subdirectory(${COCOS2DX_ROOT_PATH}/cocos ${ENGINE_BINARY_PATH}/cocos/core)
endif()

set(CMAKE_CXX_STANDARD 20)

#if(MSVC)
#    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
#        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX")
#    else()
#        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /WX /O3")
#    endif(CMAKE_BUILD_TYPE STREQUAL "Debug")
#else()
#    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
##        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -fsanitize=address -fno-omit-frame-pointer")
#    else()
#        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wpedantic -Wextra -Wunused-parameter \
#        -Wcast-align -Wcast-qual -Wduplicated-branches \
#        -Wduplicated-cond -Wextra-semi -Wfloat-equal -Wlogical-op \
#        -Wnon-virtual-dtor -Wsign-promo \
#        -pedantic-errors \
#        -O3")
#    endif(CMAKE_BUILD_TYPE STREQUAL "Debug")
#endif()

# record sources, headers, resources...
set(GAME_SOURCE)
set(GAME_HEADER)

set(GAME_RES_FOLDER
    "${CMAKE_CURRENT_SOURCE_DIR}/Resources"
    )
if(APPLE OR WINDOWS)
    cocos_mark_multi_resources(common_res_files RES_TO "Resources" FOLDERS ${GAME_RES_FOLDER})
endif()

# add cross-platforms source files and header files 
list(APPEND GAME_SOURCE
    Source/AppDelegate.cpp
    Source/GameScene.cpp

    Source/GameLoop/GameLoop.cpp

    Source/Player/Backpack.cpp
    Source/Player/Player.cpp
    Source/Player/PlayerInput.cpp

    Source/ItemsSystem/Weapon.cpp

    Source/WorldSystem/BaseEntity.cpp

    Source/Pathfinder/Pathfinder.cpp

    Source/WorldSystem/World.cpp
    Source/WorldSystem/ReadFileWorldBuilder.cpp
    Source/WorldSystem/RandomGeneratorWorldBuilder.cpp

    Source/Stats/StatsContainer.cpp

    Source/Stats/Modificators/StatWithModificators.cpp

    Source/UI/Canvas.cpp
    Source/UI/InventoryView.cpp
    Source/UI/StepCounter.cpp
    Source/UI/StatBar.cpp
    )

list(APPEND GAME_HEADER
    Include/AppDelegate.h
    Include/GameScene.h

    Include/GameLoop/GameLoop.h
    Include/GameLoop/IUpdatable.h

    Include/Commands/ICommand.h

    Include/Player/Backpack.h
    Include/Player/Player.h
    Include/Player/PlayerInput.h

    Include/ItemsSystem/Accessory.h
    Include/ItemsSystem/AttackData.h
    Include/ItemsSystem/AttackHandler.h
    Include/ItemsSystem/AttackSearchFromDFS.h
    Include/ItemsSystem/IAttackSearch.h
    Include/ItemsSystem/IItem.h
    Include/ItemsSystem/IVisualAttack.h
    Include/ItemsSystem/Weapon.h

    Include/WorldSystem/BaseEntity.h
    
    Include/Pathfinder/Pathfinder.h

    Include/WorldSystem/World.h
    Include/WorldSystem/ReadFileWorldBuilder.h
    Include/WorldSystem/RandomGeneratorWorldBuilder.h

    Include/Stats/IHaveStats.h
    Include/Stats/IStat.h
    Include/Stats/IStatsContainer.h
    Include/Stats/StatsContainer.h
    Include/Stats/StatType.h

    Include/Stats/Modificators/IStatModificator.h
    Include/Stats/Modificators/StatWithModificators.h

    Include/UI/Canvas.h
    Include/UI/Colors.h
    Include/UI/InventoryView.h
    Include/UI/StepCounter.h
    Include/UI/StatBar.h

    Include/Utils/Direction.h
    Include/Utils/EventsSystem.h
    Include/Utils/Common.h
    Include/WorldSystem/WorldTileConfig.h
    )

if(ANDROID)
    # change APP_NAME to the share library name for Android, it's value depend on AndroidManifest.xml
    set(APP_NAME MyGame)
    list(APPEND GAME_SOURCE
         proj.android/app/jni/hellocpp/main.cpp
         )
elseif(LINUX)
    list(APPEND GAME_SOURCE
         proj.linux/main.cpp
         )
elseif(WINDOWS)
    list(APPEND GAME_HEADER
         proj.win32/main.h
         proj.win32/resource.h
         )
    list(APPEND GAME_SOURCE
         proj.win32/main.cpp
         proj.win32/game.rc
         ${common_res_files}
         )
elseif(APPLE)
    if(IOS)
        list(APPEND GAME_HEADER
             proj.ios_mac/ios/AppController.h
             proj.ios_mac/ios/RootViewController.h
             )
        set(APP_UI_RES
            proj.ios_mac/ios/LaunchScreen.storyboard
            proj.ios_mac/ios/LaunchScreenBackground.png
            proj.ios_mac/ios/Images.xcassets
            )
        list(APPEND GAME_SOURCE
             proj.ios_mac/ios/main.m
             proj.ios_mac/ios/AppController.mm
             proj.ios_mac/ios/RootViewController.mm
             proj.ios_mac/ios/Prefix.pch
             ${APP_UI_RES}
             )
    elseif(MACOSX)
        set(APP_UI_RES
            proj.ios_mac/mac/Icon.icns
            proj.ios_mac/mac/Info.plist
            )
        list(APPEND GAME_SOURCE
             proj.ios_mac/mac/main.cpp
             proj.ios_mac/mac/Prefix.pch
             ${APP_UI_RES}
             )
    endif()
    list(APPEND GAME_SOURCE ${common_res_files})
endif()

# mark app complie info and libs info
set(all_code_files
    ${GAME_HEADER}
    ${GAME_SOURCE}
    )
if(NOT ANDROID)
    add_executable(${APP_NAME} ${all_code_files})
else()
    add_library(${APP_NAME} SHARED ${all_code_files})
    add_subdirectory(${COCOS2DX_ROOT_PATH}/cocos/platform/android ${ENGINE_BINARY_PATH}/cocos/platform)
    target_link_libraries(${APP_NAME} -Wl,--whole-archive cpp_android_spec -Wl,--no-whole-archive)
endif()

target_link_libraries(${APP_NAME} cocos2d)
target_include_directories(${APP_NAME}
        PRIVATE Classes
        PRIVATE ${COCOS2DX_ROOT_PATH}/cocos/audio/include/
)

# mark app resources
setup_cocos_app_config(${APP_NAME})
if(APPLE)
    set_target_properties(${APP_NAME} PROPERTIES RESOURCE "${APP_UI_RES}")

    if(MACOSX)
        set_xcode_property(${APP_NAME} INFOPLIST_FILE "${CMAKE_CURRENT_SOURCE_DIR}/proj.ios_mac/mac/Info.plist")
    elseif(IOS)
        set_xcode_property(${APP_NAME} INFOPLIST_FILE "${CMAKE_CURRENT_SOURCE_DIR}/proj.ios_mac/ios/Info.plist")
        set_xcode_property(${APP_NAME} ASSETCATALOG_COMPILER_APPICON_NAME "AppIcon")
    endif()

    # For code-signing, set the DEVELOPMENT_TEAM:
    #set_xcode_property(${APP_NAME} DEVELOPMENT_TEAM "GRLXXXX2K9")
elseif(WINDOWS)
    cocos_copy_target_dll(${APP_NAME})
endif()

if(LINUX OR WINDOWS)
    cocos_get_resource_path(APP_RES_DIR ${APP_NAME})
    cocos_copy_target_res(${APP_NAME} LINK_TO ${APP_RES_DIR} FOLDERS ${GAME_RES_FOLDER})
endif()
